generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  password      String
  firstName     String?
  lastName      String?
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projects      Project[]
  sessions      Session[]
  subscriptions Subscription[]
  userAssets    UserAsset[]

  @@map("users")
}

model Subscription {
  id            String             @id @default(cuid())
  userId        String
  type          SubscriptionType   @default(FREE)
  status        SubscriptionStatus @default(INACTIVE)
  startDate     DateTime?
  endDate       DateTime?
  trialEndDate  DateTime?
  billingCycle  BillingCycle?
  price         Decimal?           @db.Decimal(10, 2)
  currency      String             @default("PLN")
  paymentMethod String?
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String   @default("#3b82f6")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  labels      Label[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Label {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String
  fabricData  Json?
  thumbnail   String?
  width       Float    @default(100)
  height      Float    @default(50)
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("labels")
}

model UserAsset {
  id          String    @id @default(cuid())
  name        String
  fileName    String
  filePath    String    // Path in storage bucket
  fileSize    Int       // Size in bytes
  mimeType    String
  width       Int?      // Image width in pixels
  height      Int?      // Image height in pixels
  userId      String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_assets")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubscriptionType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  EXPIRED
  CANCELLED
  TRIAL
}

enum BillingCycle {
  MONTHLY
  YEARLY
}
