generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  password      String
  firstName     String?
  lastName      String?
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projects      Project[]
  sessions      Session[]
  subscriptions Subscription[]
  userAssets    UserAsset[]
  templates     Template[]

  @@map("users")
}

model Subscription {
  id            String             @id @default(cuid())
  userId        String
  type          SubscriptionType   @default(FREE)
  status        SubscriptionStatus @default(INACTIVE)
  startDate     DateTime?
  endDate       DateTime?
  trialEndDate  DateTime?
  billingCycle  BillingCycle?
  price         Decimal?           @db.Decimal(10, 2)
  currency      String             @default("PLN")
  paymentMethod String?
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String   @default("#3b82f6")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  labels      Label[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Label {
  id          String    @id @default(cuid())
  name        String
  description String?
  projectId   String
  fabricData  Json?
  thumbnail   String?
  width       Float     @default(100)
  height      Float     @default(50)
  version     Int       @default(1)
  batchId     String?   // For bulk created labels
  templateId  String?   // Reference to template
  uniqueId    String?   // Unique identifier for bulk labels
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template    Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@map("labels")
}

model UserAsset {
  id          String    @id @default(cuid())
  name        String
  fileName    String
  filePath    String    // Path in storage bucket
  fileSize    Int       // Size in bytes
  mimeType    String
  width       Int?      // Image width in pixels
  height      Int?      // Image height in pixels
  userId      String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_assets")
}

model Template {
  id            String           @id @default(cuid())
  name          String
  description   String?
  category      TemplateCategory @default(CUSTOM)
  tags          String[]         @default([])
  width         Float            @default(100)
  height        Float            @default(50)
  fabricData    Json
  thumbnail     String?
  isPublic      Boolean          @default(false)
  isDefault     Boolean          @default(false) // Matching existing schema
  isSystem      Boolean          @default(false) // Built-in templates
  downloads     Int              @default(0)
  likes         Int              @default(0)
  userId        String           // Required in existing schema
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  labels        Label[]          // Templates can be used by labels
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Indexy dla wydajno≈õci
  @@index([category])
  @@index([isPublic])
  @@index([isDefault])
  @@index([isSystem])
  @@index([userId])
  @@map("label_templates") // Matching existing table name
}

enum TemplateCategory {
  STANDARD
  ADDRESS
  SHIPPING
  PRODUCT
  INDUSTRIAL
  CUSTOM
  MARKETING
  OFFICE
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubscriptionType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  EXPIRED
  CANCELLED
  TRIAL
}

enum BillingCycle {
  MONTHLY
  YEARLY
}
